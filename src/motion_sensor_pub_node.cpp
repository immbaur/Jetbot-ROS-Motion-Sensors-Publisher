
#include "ros/ros.h"

#include <sstream>
#include <RTIMULib.h>

int main(int argc, char **argv)
{
  
  ros::init(argc, argv, "talker");

  ros::NodeHandle n;

  int sampleCount = 0;
  int sampleRate = 0;
  uint64_t rateTimer;
  uint64_t displayTimer;
  uint64_t now;

  //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
  //  Or, you can create the .ini in some other directory by using:
  //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
  //  where <directory path> is the path to where the .ini file is to be loaded/saved

  RTIMUSettings *settings = new RTIMUSettings("RTIMULib");

  RTIMU *imu = RTIMU::createIMU(settings);

  if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
      printf("No IMU found\n");
      exit(1);
  }

  //  This is an opportunity to manually override any settings before the call IMUInit

  //  set up IMU

  imu->IMUInit();

  //  this is a convenient place to change fusion parameters

  imu->setSlerpPower(0.02);
  imu->setGyroEnable(true);
  imu->setAccelEnable(true);
  imu->setCompassEnable(true);

  //  set up for rate timer

  rateTimer = displayTimer = RTMath::currentUSecsSinceEpoch();

  ros::Rate loop_rate(1/(imu->IMUGetPollInterval()));

  while (ros::ok())
  {
    while (imu->IMURead()) {
        RTIMU_DATA imuData = imu->getIMUData();
        sampleCount++;

        now = RTMath::currentUSecsSinceEpoch();

        //  display 10 times per second

        if ((now - displayTimer) > 100000) {
            printf("Sample rate %d: %s\r", sampleRate, RTMath::displayDegrees("", imuData.fusionPose));
            fflush(stdout);
            displayTimer = now;
        }

        //  update rate every second

        if ((now - rateTimer) > 1000000) {
            sampleRate = sampleCount;
            sampleCount = 0;
            rateTimer = now;
        }
    }

    std::stringstream ss;
    ss << "hello world ";

    ROS_INFO("%s", ss.str().c_str());
    ros::spinOnce();
    loop_rate.sleep();
  }


  return 0;
}
